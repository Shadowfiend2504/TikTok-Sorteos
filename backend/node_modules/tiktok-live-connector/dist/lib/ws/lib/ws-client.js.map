{"version":3,"file":"ws-client.js","sourceRoot":"","sources":["../../../../src/lib/ws/lib/ws-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { client as WebSocket, connection as WebSocketConnection, Message as WebSocketMessage } from 'websocket';\nimport * as http from 'node:http';\nimport { BinaryWriter } from '@bufbuild/protobuf/wire';\nimport { DecodedWebcastPushFrame, WebSocketParams } from '@/types/client';\nimport { createBaseWebcastPushFrame, deserializeWebSocketMessage } from '@/lib/utilities';\nimport Config from '@/lib/config';\nimport TypedEventEmitter from 'typed-emitter';\nimport CookieJar from '@/lib/web/lib/cookie-jar';\nimport { HeartbeatMessage, WebcastImEnterRoomMessage } from '@/types';\n\nconst textEncoder = new TextEncoder();\n\ntype EventMap = {\n    connect: (connection: WebSocketConnection) => void;\n    close: () => void;\n    messageDecodingFailed: (error: Error) => void;\n    unknownResponse: (message: WebSocketMessage) => void;\n    protoMessageFetchResult: (response: any) => void;\n    webSocketData: (data: Uint8Array) => void;\n    imEnteredRoom: (decodedContainer: DecodedWebcastPushFrame) => void;\n};\n\ntype TypedWebSocket = WebSocket & TypedEventEmitter<EventMap>;\ntype WebSocketConstructor = new () => TypedWebSocket;\n\n\nexport default class TikTokWsClient extends (WebSocket as WebSocketConstructor) {\n    public connection: WebSocketConnection | null;\n    protected pingInterval: NodeJS.Timeout | null;\n    protected wsHeaders: Record<string, string>;\n    protected wsUrlWithParams: string;\n\n    constructor(\n        wsUrl: string,\n        cookieJar: CookieJar,\n        protected readonly webSocketParams: WebSocketParams,\n        webSocketHeaders: Record<string, string>,\n        webSocketOptions: http.RequestOptions,\n        protected webSocketPingIntervalMs: number = 10000\n    ) {\n        super();\n\n        this.pingInterval = null;\n        this.connection = null;\n        this.wsUrlWithParams = `${wsUrl}?${new URLSearchParams(this.webSocketParams)}${Config.DEFAULT_WS_CLIENT_PARAMS_APPEND_PARAMETER}`;\n        this.wsHeaders = { Cookie: cookieJar.getCookieString(), ...(webSocketHeaders || {}) };\n        this.on('connect', this.onConnect.bind(this));\n        this.connect(this.wsUrlWithParams, '', `https://${Config.TIKTOK_HOST_WEB}`, this.wsHeaders, webSocketOptions);\n    }\n\n    protected onConnect(wsConnection: WebSocketConnection) {\n        this.sendHeartbeat();\n        this.connection = wsConnection;\n        this.pingInterval = setInterval(() => this.sendHeartbeat(), this.webSocketPingIntervalMs);\n        this.connection.on('message', this.onMessage.bind(this));\n        this.connection.on('close', this.onDisconnect.bind(this));\n    }\n\n    /**\n     * Send a message to the WebSocket server\n     * @param data The message to send\n     * @returns True if the message was sent, false otherwise\n     */\n    public sendBytes(data: Uint8Array): boolean {\n        if (this.connection) {\n            this.connection.sendBytes(Buffer.from(data));\n            return true;\n        }\n        return false;\n    }\n\n    protected onDisconnect() {\n        clearInterval(this.pingInterval);\n        this.pingInterval = null;\n        this.connection = null;\n        this.emit('close');\n    }\n\n    /**\n     * Handle incoming messages\n     * @param message The incoming WebSocket message\n     * @protected\n     */\n    protected async onMessage(message: WebSocketMessage) {\n\n        // Emit WebSocket data\n        this.emit('webSocketData', message);\n\n        // If the message is not binary, emit an unknown response\n        if (message.type !== 'binary') {\n            return this.emit('unknownResponse', message);\n        }\n\n        //  If the message is binary, decode it\n        try {\n            const decodedContainer: DecodedWebcastPushFrame = await deserializeWebSocketMessage(message.binaryData);\n\n            // If the message has a decoded protoMessageFetchResult, emit it\n            if (decodedContainer.protoMessageFetchResult) {\n\n                // If it needs an ack, send the ack\n                if (decodedContainer.protoMessageFetchResult.needsAck) {\n                    this.sendAck(decodedContainer);\n                }\n\n                this.emit('protoMessageFetchResult', decodedContainer.protoMessageFetchResult);\n            }\n\n            // If it's a room enter, emit\n            if (decodedContainer.payloadType === 'im_enter_room_resp') {\n                this.emit('imEnteredRoom', decodedContainer);\n            }\n\n        } catch (err) {\n            this.emit('messageDecodingFailed', err);\n        }\n\n    }\n\n    /**\n     * Static Keep-Alive ping\n     */\n    protected sendHeartbeat() {\n        const { room_id } = this.webSocketParams;\n\n        // Create the heartbeat\n        const hb: BinaryWriter = HeartbeatMessage.encode({ roomId: room_id });\n\n        // Wrap it in the WebcastPushFrame\n        const webcastPushFrame: BinaryWriter = createBaseWebcastPushFrame(\n            {\n                payloadEncoding: 'pb',\n                payloadType: 'hb',\n                payload: hb.finish(),\n                service: undefined,\n                method: undefined,\n                headers: {}\n            }\n        );\n\n        this.sendBytes(Buffer.from(webcastPushFrame.finish()));\n    }\n\n    /**\n     * EXPERIMENTAL: Switch to a different TikTok LIVE room while connected to the WebSocket\n     * @param roomId The room ID to switch to\n     */\n    public switchRooms(roomId: string): void {\n\n        const imEnterRoomMessage: BinaryWriter = WebcastImEnterRoomMessage.encode(\n            {\n                roomId: roomId,\n                roomTag: '',\n                liveRegion: '',\n                liveId: '12', // Static value for all streams (via decompiled APK)\n                identity: 'audience',\n                cursor: '',\n                accountType: '0',\n                enterUniqueId: '',\n                filterWelcomeMsg: '0',\n                isAnchorContinueKeepMsg: false\n            }\n        );\n\n        const webcastPushFrame: BinaryWriter = createBaseWebcastPushFrame(\n            {\n                payloadEncoding: 'pb',\n                payloadType: 'im_enter_room',\n                payload: imEnterRoomMessage.finish()\n            }\n        );\n\n        this.sendBytes(Buffer.from(webcastPushFrame.finish()));\n\n    }\n\n\n    /**\n     * Acknowledge the message was received\n     */\n    protected sendAck({ logId, protoMessageFetchResult: { internalExt } }: DecodedWebcastPushFrame): void {\n\n        // Always send an ACK for the message\n        if (!logId) {\n            return;\n        }\n\n        const webcastPushFrame: BinaryWriter = createBaseWebcastPushFrame(\n            {\n                logId: logId,\n                payloadEncoding: 'pb',\n                payloadType: 'ack',\n                payload: textEncoder.encode(internalExt)\n            }\n        );\n\n        this.sendBytes(Buffer.from(webcastPushFrame.finish()));\n    }\n\n    /**\n     * Close the WebSocket connection\n     */\n    public close(): Promise<void> {\n\n        return new Promise((resolve) => {\n            this.once('close', () => resolve());\n\n            // If connected, disconnect\n            if (this.connection) {\n                this.connection.close(1000);\n            }\n            // Otherwise immediately resolve\n            else {\n                resolve();\n            }\n\n        });\n\n    }\n}\n\n"]}